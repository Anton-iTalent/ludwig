# extract_select_vtk.py
#
# Script for creating ASCII data files with vtk-header.
# Works in combination with extract.c

# Required input
#
# system size: Lx, Ly, Lz
# timesteps: nstart, increment, nend
# ngroup: no of files in I/O-grouping
# extracted data from output: 
# scalar order parameter (op), velocity (vel), director field (dir)
# order parameter (phi - binary and tensor OP), biaxial order parameter (biaxop)
# switches for data file and vtk-file 

import sys, os, re, math
Lx=128
Ly=128
Lz=32

nstart=1000
nint=1000
nend=10000
ngroup=1

op=0
vel=0
dir=1
phi=0
biaxop=0

create_data_file=1
create_vtk_file=1

# collect and set lists for analysis
type=[]
x=[]
y=[]
z=[]
metafile=[]
filelist=[]

if op==1:
	type.append('1')
	x.append('1')
	y.append('0')
	z.append('0')
	metafile.append('qs_dir.001-00%d.meta' % ngroup)
	filelist.append('filelist_op')
	os.system('rm filelist_op')
	for i in range(nstart,nend+nint,nint):
		os.system('ls -t1 qs_dir-%08.0d.001-00%d >> filelist_op' % (i,ngroup))

if vel==1:
	type.append('2')
	x.append('1')
	y.append('2')
	z.append('3')
	metafile.append('vel.001-00%d.meta' % ngroup)
	filelist.append('filelist_vel')
	os.system('rm filelist_vel')
	for i in range(nstart,nend+nint,nint):
		os.system('ls -t1 vel-%08.0d.001-00%d >> filelist_vel' % (i,ngroup))

if dir==1:
	type.append('3')
	x.append('2')
	y.append('3')
	z.append('4')
	metafile.append('qs_dir.001-00%d.meta' % ngroup)
	filelist.append('filelist_dir')
	os.system('rm filelist_dir')
	for i in range(nstart,nend+nint,nint):
		os.system('ls -t1 qs_dir-%08.0d.001-00%d >> filelist_dir' % (i,ngroup))

if phi==1:
	type.append('4')
	x.append('1')
	y.append('0')
	z.append('0')
	metafile.append('phi.%03.0d-001.meta' % ngroup)
	filelist.append('filelist_phi')
	os.system('rm filelist_phi')
	for i in range(nstart,nend+nint,nint):
		os.system('ls -t1 phi-%08.0d.%03.0d-001 >> filelist_phi' % (i,ngroup))

if biaxop==1:
	type.append('5')
	x.append('5')
	y.append('0')
	z.append('0')
	metafile.append('qs_dir.001-00%d.meta' % ngroup)
	filelist.append('filelist_biaxop')
	os.system('rm filelist_biaxop')
	for i in range(nstart,nend+nint,nint):
		os.system('ls -t1 qs_dir-%08.0d.001-00%d >> filelist_biaxop' % (i,ngroup))

os.system('gcc -o extract extract.c -lm')

# create ASCII datafile
if create_data_file==1:
	for i in range(len(type)):

		datafiles=open(filelist[i],'r') 

		print('# creating datafiles')

		while 1:
			line=datafiles.readline()
			if not line: break

			print '# processing %s' % line 

			stub=line.split('.',1)
			os.system('./extract %s %s' % (metafile[i],stub[0]))

		datafiles.close

if create_vtk_file==1:

	# create datafile list
	if op==1:
	        os.system('rm filelist_op')
		for i in range(nstart,nend+nint,nint):
				os.system('ls -t1 qs_dir-%08.0d >> filelist_op' % i)
	if vel==1:
	        os.system('rm filelist_vel')
		for i in range(nstart,nend+nint,nint):
				os.system('ls -t1 vel-%08.0d >> filelist_vel' % i)
	if dir==1:
	        os.system('rm filelist_dir')
		for i in range(nstart,nend+nint,nint):
				os.system('ls -t1 qs_dir-%08.0d >> filelist_dir' % i)
	if phi==1:
	        os.system('rm filelist_phi')
		for i in range(nstart,nend+nint,nint):
				os.system('ls -t1 phi-%08.0d >> filelist_phi' % i)
	if biaxop==1:
	        os.system('rm filelist_biaxop')
		for i in range(nstart,nend+nint,nint):
				os.system('ls -t1 qs_dir-%08.0d >> filelist_biaxop' % i)

	# create vtk-header
	for i in range(len(type)):

		x[i]=int(x[i])-1
		y[i]=int(y[i])-1
		z[i]=int(z[i])-1

		headerlines=[]
		headerlines.append('# vtk DataFile Version 2.0')
		headerlines.append('Generated by create_vtk_file')
		headerlines.append('ASCII')
		headerlines.append('DATASET STRUCTURED_POINTS')
		headerlines.append('DIMENSIONS  %d %d %d' %(Lx,Ly,Lz))
		headerlines.append('ORIGIN 0 0 0')
		headerlines.append('SPACING 1 1 1')
		headerlines.append('POINT_DATA %d' %(Lx*Ly*Lz))
		if type[i]=='1' or type[i]=='4' or type[i]=='5':
			headerlines.append('SCALARS scalar%d float 1' %i)
			headerlines.append('LOOKUP_TABLE default')
		if type[i]=='2':
			headerlines.append('VECTORS velocity float')
		if type[i]=='3':
			headerlines.append('VECTORS director float')

		print('# creating vtk-files')

		# inputfiles
		datafilenames=open(filelist[i],'r')

		while 1:
			line=datafilenames.readline()
			if not line: break

			linestring=line.split()
			datafilename=linestring[0]

			if type[i]=='1':
				outputfilename= datafilename + '.dat-op.vtk'

			if type[i]=='2':
				outputfilename= datafilename + '.dat-velo.vtk'

			if type[i]=='3':
				outputfilename= datafilename + '.dat-dir.vtk'

			if type[i]=='4':
				outputfilename= datafilename + '.dat-phi.vtk'

			if type[i]=='5':
				outputfilename= datafilename + '.dat-biaxop.vtk'

			print '# processing %s' % outputfilename

			file=open(datafilename,'r')
			out=open(outputfilename,'w')

			dataline=[]
			data=[]

			# write header
			for j in range(len(headerlines)):
				out.write('%s\n' % headerlines[j]) 

			while 1:

			     	line=file.readline()
				if not line: break

				datastring=line.split()

				if type[i]=='1' or type[i]=='4' or type[i]=='5':
					xdata=float(datastring[x[i]])
					out.write('%14.6le\n' % xdata)
				if type[i]=='2':
					xdata=float(datastring[x[i]])
					ydata=float(datastring[y[i]])
					zdata=float(datastring[z[i]])
					out.write('%14.6le %14.6le %14.6le\n' % (xdata,ydata,zdata))
				if type[i]=='3':
					xdata=float(datastring[x[i]])
					ydata=float(datastring[y[i]])
					zdata=float(datastring[z[i]])
					out.write('%14.6le %14.6le %14.6le\n' % (xdata,ydata,zdata))

	       		out.close
			file.close

		datafilenames.close

print('# done')
