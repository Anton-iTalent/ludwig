Changes

Log file for changes to the code.
=================================

2007 Januaary 16th kevin

* I've removed the ghost noise calculation from d3q15/d3q19
  to collision.c as it is now model-independent.

* In collision.c I have also replaced the binary fluid LB
  with a slightly altered routine. This has one difference
  from the previous version which is detailed in the comments
  for the routine MODEL_collide_binary_lb().

  There is now a driver routine collide() which should be
  called from main.


2006 December 21st kevin

* I've updated the colloid-colloid interaction routine to
  do a (more simple) search. This is more natural in parallel,
  and allows the fluctuating part of the lubrication correction
  to be computed uniquely.

2006 December 20th kevin

* Further ongoing refactoring:

* Model. The (single fluid) collision stage has been rewritten
         to allow a true multiple realxation time model. This
         introduces the two matrices ma_ and mi_ (defined in
         d3q15.c etc) which are the transformation between
         hydrodynamic space and distribution space. This is
         EXACTLY equilivalent to what we had before if not
         worried about ghost modes.

	 This allows relaxation time for the ghost modes to
         be set not equal to unity (intended for Ginzburg/D'Humieres
         BBL).

         On most platforms I have tested, the calculation
         including the full multirelaxation is as fast as the
         old method (and it has up to twice as many floating
         point operations).

* In addition, I have tried to encapsulate the details of the
  distribution f[] into model.c. However, the Site structure
  is still exposed in collision.c etc. COM_halo() is replaced
  by halo_site().

* I intend to move the binary fluid collision to this approach
  as well, and eliminate model-dependent code in d3qX.c etc.

* Physical quantities related to the fluid have been separated
  and now appear in their own file physics.c

* Subgrid-scale particles and the singular force approach. This
  is included in the file subgrid.c. At the moment compile with
  -D_SUBGRID_ and choose e.g., a0 = 0.05 along with some value
  for colloid gravity. I will try to move this to a run-time
  option (ie., via colloid_type).

* "Active2" particles (aka squirmers). Now included via the
  compile time option -D_ACTIVE2_ *and* selecting coloid_type
  active2. Set the parameter colloid_dp for the strength of
  the coupling. Again, I will move this is a solely run-time
  option when the refactoring catches up.

* The tests have been updated.




2006 October 16th kevin

* Fixed a problem in the Monte Carlo initialisation.

* Moved a number of routines dealing with particle-particle
  interactions to new file potential.c

* Slightly different restrictions on number of cells in
  each direction: 3 for periodic directions; 1 for non-periodic.

2006 October 2nd kevin

* Major ongoing organisational changes:

  - model.c        now just a wrapper for the model DdQnn
                   - other routines have moved to...

  - collision.c    contains routines related to collision
  - propagation.c  contains routines related to propagation

  - colloids.c     now contains only structure definition / cell list stuff
                   - other routines have moved to...

  - active.c       active particle stuff
  - build.c        routines for colloid link construction
  - bbl.c          colloid bounce back on links
  - interaction.c  all the rest

  - cmd.c          Initialisation by "growth" algorithm has been
                   removed in favour of a well-posed Monte Carlo
                   problem (requires kT to be set!).

* There are a number of new options for the input file associated
  with the colloid initialisation, which try to do away with
  preprocessor options.

  colloid_init     fixed_number_monodisperse
  colloid_mc_steps 0         [number of Monte Carlo steps to run]
  colloid_type     inactive  [the only choice at the moment]
  colloid_a0       1.25
  colloid_ah       1.09
  colloid_vf       0.250     [if using fixed_volume_fraction_monodisperse]
  colloid_no       32        [if using fixed_number_monodisperse]

  Note that 'fixed_number_monodisperse' gives a random distribution
  of exactly the number of particles requested: the maximum volume
  fraction is then limited without running the Monte Carlo to remove
  overlaps.

  'fixed_volume_fraction_monodisperse' initialises particles on a lattice
  for volume fractions up to 60%. Use the Monte Carlo to 'melt' the
  lattice if required.

  The minimum cell width is now set via the input file, e.g.:

  cell_list_lmin 8.0

  This means you can control the number of cells in the cell list.
  The code checks that the cell width is large enough to catch all
  the interactions requested (lubrication and so on).

* Fluctuations.
  - Still compile with -D_NOISE_
  - Note the input parameter is now the temperature kT, NOT the
    "thermal velocity" used previously.

* Walls
  - are now implemented in parallel.
  - Note that the fluid system size is now exactly that requested
    by 'size NX_NY_NZ' in the input. The walls are located at the
    edge of the system (x = 0.5 and x = NX + 0.5 etc). Use

  periodicity 1_1_0
  boundary_walls_on yes

  To get walls in the z-direction. You can also have a 'duct' or a
  closed box. For the case of walls, you can set the top and bottom
  wall speed (in the x-direction).

  - DO NOT USE YET WITH COLLOIDS! I haven't included the wall-colloid
  links in this check-in.

* Other

  - cartesian.c and coords.c have been combined in coords.c
  - cmem.c has been combined with colloids.c



2006 August 16 kevin

* Removed restriction on cell list number in each coordinate
  direction. This means the number of cells can be one.
  There must be checks that particle-particle interactions
  are accounted for correctly.

* Removing utilities.h in favour of vector.h etc.

* Removed Global_Colloid structure (temporary replced with
  extern declaration where necessary.

* Removed Global_Colloid.fr (unused)

* Removed Global_Colloid.r_clus (always zero at present; may
  reintroduce cluster implicit method at later date).

2006 August 4 kevin

* Removed (at last) globals.h. This means there are explicit
  dependencies on include files in each source file.

* Added velocity vector in lattice.c

* Added stub code for sub-grid scale particles; introduced
  with -D_SUBGRID_ in the Makefile.


2006 August 3 kevin

* Updated the implementation of global force in lattice.c to
  allow use of a subscripted vector[], rather than .x.y.z.

* Old random number routines have been removed (ran.[ch]).

2006 June 6 kevin

* I have removed the remaining gbl objects. The rho/phi related
  elements are encapsulated in model.c

* All the I/O related stuff has been moved to communicate.c.
  Eventually, I expect this to be split into halo related
  stuff and lattice I/O related stuff.

* I have removed all the original run time input processing
  code in favour of the runtime interface. IMPORTANT: as a
  consequence, there is no run time input for colloid parameters
  which are hard set in COLL_init(). This will be updated.

* cio.c: I have removed a lot of the Global_Colloid stuff from
  the colloid I/O as this makes it extremely unweildy. A better
  method for keeping restart state needs to be found.

* colloids.h: various unused struct elements removed from
  Global_Colloid. This struct is going to be removed (it's
  undesirable global state). 

* interaction.c: the order parameter gradient calculation has
  been (correctly) reinstated.


2006 May 30 kevin

* I have rearranged the order of the velocity set in d3q15.c
  so that it is in Sean's optimal order (equivalent to that
  used in d3q19.c). This means the propagation routines are
  slightly simplified. In addition, cv now satisfies
  cv[p] = -cv[NVEL-p] for p > 0, so BC_Map[] can be dispensed
  with in BBL.

* Removed a number of minor used code segments.

2006 May 23 kevin

* I have rearranged the fluctuation code so that the sheer and
  bulk viscosity can be varied independently. This also means
  that the single fluid collision now has separate relaxation
  times for sheer and bulk modes (like the binary fluid collision).

* I have encapsulated the viscosity and the fluctuation "temperature"
  kT in model.c. All gbl objects are still scheduled for deletion.

* A number of minor changes to address missing function prototypes.


2006 May 12 kevin

* I have moved all d3q15 dependent code to the new file d3q15.c
  (including the propagation and the ghost modes). Likewise, all
  d3q19 stuff is in d3q19.c. This means the site variable is
  declared in d3qnn.h.

* D3Q19 ghost noise has been added.

* The single-fluid collision has been moved to model.c, and
  single.c removed.

* I've removed the variables gbl.eta and gbl.noise in favour
  of encapsulated versions in model.c. All gbl objects are
  scheduled for deletion.
